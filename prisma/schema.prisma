// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// bun x prisma generate =>type-safe database client 
//bun x prisma db push => commit changes to db
datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:npg_HLSqM0xti9AE@ep-old-cake-a89m78q4-pooler.eastus2.azure.neon.tech/neondb?sslmode=require"
}

//ran CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
//query in POSTGRES as uuid_generate_v4 relies on this extension which is not imported by default 
model User {
  // email , id , client id, firstname ,lastname(default ) 
  id           String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  clerkId      String         @unique
  email        String         @unique
  firstname    String?        @unique
  lastname     String?        @unique
  createdAt    DateTime       @default(now())
  subscription  Subscription?
  automations  Automation[]
  integrations Integrations[]
  formFilled   Boolean        @default(false)
}

enum SUBSCRIPTION_PLAN {
  FREE
  PRO
}

model Subscription {
  // generate UUId => generated using a database function
  id         String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid //directive 
  User       User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?           @unique @db.Uuid
  createdAt  DateTime          @default(now())
  customerId String?           @unique
  plan       SUBSCRIPTION_PLAN @default(FREE)
  updatedAt  DateTime          @default(now())
}

model Automation {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String    @default("Untitled")
  createdAt DateTime  @default(now())
  active    Boolean   @default(false)
  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?   @db.Uuid
  trigger   Trigger[] //type =>msg or ai
  listener  Listener? // 
  posts     Post[] // post data 
  dms       Dms[] // who did it (enduser) and what msg (for ai)
  keywords  Keyword[] // unique keyword for every unique automation
}

enum LISTENERS {
  MESSAGE
  AI
}

model Listener {
  id           String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String     @unique @db.Uuid
  listener     LISTENERS  @default(MESSAGE)
  prompt       String
  commentReply String?
  dmCount      Int        @default(0)
  commentCount Int        @default(0)
}

enum INTEGRATION {
  INSTAGRAM
  TWITTER
  FACEBOOK
}

model Integrations {
  id          String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        INTEGRATION @default(INSTAGRAM)
  createdAt   DateTime    @default(now())
  User        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?     @db.Uuid
  token       String      @unique
  instagramId String?     @unique
  expiresAt   DateTime?
}

model Trigger {
  id           String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Dms {
  id           String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
  createdAt    DateTime    @default(now())
  senderId     String?
  reciever     String?
  message      String?
}

enum MEDIATYPE {
  IMAGE
  VIDEO
  CAROSEL_ALBUM
}

model Post {
  id           String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  postid       String
  caption      String?
  media        String
  mediaType    MEDIATYPE   @default(IMAGE)
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
  createdAt    DateTime    @default(now())
}

model Keyword {
  id           String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  word         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
  createdAt    DateTime    @default(now())
  // no two words can be used for the same automation id 

  @@unique([word, automationId]) // ( both unieue pairs )
}
